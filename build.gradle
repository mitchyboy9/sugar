apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'java'

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
allprojects {
    version = VERSION_NAME
    group = GROUP

    repositories {
        google()
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

subprojects { proj ->
    apply plugin: 'jacoco'

    jacoco {
        version "0.7.1.201405082137"
    }

    task jacocoTestReport(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled = true
            html.enabled = true
        }
        getClassDirectories().setFrom(fileTree(
                dir: 'build/intermediates/classes/debug',
                excludes: ['**/R*.class',
                           '**/BuildConfig*']))
        getSourceDirectories().setFrom(files('src/main/java'))
        getExecutionData().setFrom(files('build/jacoco/testDebugUnitTest.exec'))
        doFirst {
            files('build/intermediates/classes/debug').getFiles().each { file ->
                if (file.name.contains('$$')) {
                    file.renameTo(file.path.replace('$$', '$'))
                }
            }
        }
    }
}

jacoco {
    toolVersion "0.7.1.201405082137"
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group = "Reporting"
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.jacocoTestReport)

    getAdditionalSourceDirs().setFrom(files('library/src/main/java'))
    getSourceDirectories().setFrom(files('library/src/main/java'))
    getClassDirectories().setFrom(files('library/build/intermediates/classes/debug'))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))

    reports {
        html.enabled = true
        xml.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        getExecutionData().setFrom(files(executionData.findAll { it.exists() }))
    }
}

coveralls {
    sourceDirs = files('library/src/main/java').flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}